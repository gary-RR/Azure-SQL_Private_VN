name: deploy

on:
  workflow_call:
    outputs:
      frontendSubnetStartIp: 
        value: ${{jobs.deploy-vnet.outputs.frontendSubnetStartIp }}
      frontendSubnetEndIp: 
        value: ${{ jobs.deploy-vnet.outputs.frontendSubnetEndIp }}
      frontendSubnetId: 
        value: ${{ jobs.deploy-vnet.outputs.frontendSubnetId }}
      backendSubnetId: 
        value: ${{ jobs.deploy-vnet.outputs.backendSubnetId }}   
      vnetId:
        value: ${{ jobs.deploy-vnet.outputs.vnetId }}      
    inputs:
      resourceGroupName:
        required: true
        type: string      
      appName:
        required: true
        type: string
      environmentType:
        required: true
        type: string
      createGateway:
        required: true
        type: string      
      createWindowsServer1:
        required: true
        type: boolean
      createLinuxServer1:
        required: true
        type: boolean
      createWindowsDesktop1:
        required: true
        type: boolean
      adminDBLoginName:
        required: true
        type: string
      databaseName:
        required: true
        type: string
      vmSize:
        required: true
        type: string
      vmWindowsLoginUser:
        required: true
        type: string
      vmLinuxLoginUser:
        required: true
        type: string         
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      adminDBPassword:
        required: true             
      vmWindowsLoginPassword:
        required: true
      vmLinuxLoginPassword:
        required: true

jobs:
  
  # validate-vnet:
  #   environment: ${{ inputs.environmentType }}
  #   runs-on: ubuntu-latest  
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: azure/login@v1
  #     id: validate-vnet
  #     name: Sign in to Azure
  #     with:
  #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #   - if: inputs.environmentType != 'Production'
  #     uses: azure/arm-deploy@v1
  #     name: Run preflight validation
  #     with:
  #       deploymentName: ${{ github.run_number }}
  #       resourceGroupName: ${{ inputs.resourceGroupName }}
  #       template: ./deploy/modules/create_vnet_and_vpn.bicep
  #       parameters: >           
  #         appName=${{ inputs.appName }}
  #         createGateway=${{ inputs.createGateway }}
  #        #  vnetAddressPrefixes=${{ inputs.vnetAddressPrefixes }}
  #        #  subnet1AddressPrefixes=${{ inputs.subnet1AddressPrefixes }}
  #        #  subnet2AddressPrefixes=${{ inputs.subnet2AddressPrefixes }}
  #        #  subnet3AddressPrefixes=${{ inputs.subnet3AddressPrefixes }}
  #        #  vpnClientAddressPrefix=${{ inputs.vpnClientAddressPrefix }}
  #       deploymentMode: Validate

  deploy-vnet:     
      # environment: ${{ inputs.environmentType }}
      # needs: validate-vnet
      runs-on: ubuntu-latest
      outputs:
        frontendSubnetStartIp: ${{ steps.deploy-vnet.outputs.frontendSubnetStartIp }}
        frontendSubnetEndIp: ${{ steps.deploy-vnet.outputs.frontendSubnetEndIp }}
        frontendSubnetId: ${{ steps.deploy-vnet.outputs.frontendSubnetId }}
        backendSubnetId: ${{ steps.deploy-vnet.outputs.backendSubnetId }}
        vnetId: ${{ steps.deploy-vnet.outputs.vnetId }}
        vnetId1: ${{steps.deploy-vnet.outputs.test}}
      steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        # id: deploy-vnet
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        name: Run preflight validation
        id: deploy-vnet
        with:
          failOnStdErr: false
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./deploy/modules/create_vnet_and_vpn.bicep
          parameters: >           
            appName=${{ inputs.appName }}
            createGateway=${{ inputs.createGateway }}

      - name: Echo frontendSubnetStartIp
        run: echo "::set-output name=frontendSubnetStartIp::${{ steps.deploy-vnet.outputs.frontendSubnetStartIp}}" 
      - name: Echo frontendSubnetEndIp
        run: echo "::set-output name=frontendSubnetEndIp::${{ steps.deploy-vnet.outputs.frontendSubnetEndIp}}"
      - name: Echo frontendSubnetId
        run: echo "::set-output name=frontendSubnetId::${{ steps.deploy-vnet.outputs.frontendSubnetId}}"      
      - name: Echo backendSubnetId
        run: echo "::set-output name=backendSubnetId::${{ steps.deploy-vnet.outputs.backendSubnetId}}" 
      - name: Echo vnetID
        run: echo "::set-output name=vnetId1::${{ steps.deploy-vnet.outputs.vnetId }}"
        
  
              
       
