name: deploy

on:
  workflow_call:
    inputs:
      resourceGroupName:
        required: true
        type: string      
      appName:
        required: true
        type: string
      environmentType:
        required: true
        type: string
      createGateway:
        required: true
        type: string      
      createWindowsServer1:
        required: true
        type: boolean
      createLinuxServer1:
        required: true
        type: boolean
      createWindowsDesktop:
        required: true
        type: boolean
      adminDBLoginName:
        required: true
        type: string
      databaseName:
        required: true
        type: string
      vmSize:
        required: true
        type: string
      vmWindowsLoginUser:
        required: true
        type: string
      vmLinuxLoginUser:
        required: true
        type: string         
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      adminDBPassword:
        required: true             
      vmWindowsLoginPassword:
        required: true
      vmLinuxLoginPassword:
        required: true

jobs:
  
  # validate-vnet:
  #   environment: ${{ inputs.environmentType }}
  #   runs-on: ubuntu-latest  
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: azure/login@v1
  #     id: validate-vnet
  #     name: Sign in to Azure
  #     with:
  #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #   - if: inputs.environmentType != 'Production'
  #     uses: azure/arm-deploy@v1
  #     name: Run preflight validation
  #     with:
  #       deploymentName: ${{ github.run_number }}
  #       resourceGroupName: ${{ inputs.resourceGroupName }}
  #       template: ./deploy/modules/create_vnet_and_vpn.bicep
  #       parameters: >           
  #         appName=${{ inputs.appName }}
  #         createGateway=${{ inputs.createGateway }}
  #        #  vnetAddressPrefixes=${{ inputs.vnetAddressPrefixes }}
  #        #  subnet1AddressPrefixes=${{ inputs.subnet1AddressPrefixes }}
  #        #  subnet2AddressPrefixes=${{ inputs.subnet2AddressPrefixes }}
  #        #  subnet3AddressPrefixes=${{ inputs.subnet3AddressPrefixes }}
  #        #  vpnClientAddressPrefix=${{ inputs.vpnClientAddressPrefix }}
  #       deploymentMode: Validate

  deploy-vnet:
      # environment: ${{ inputs.environmentType }}
      # needs: validate-vnet
      runs-on: ubuntu-latest
      outputs:       
        frontendSubnet: ${{ steps.deploy-vnet.outputs.frontendSubnet }}
        backendSubnet: ${{ steps.deploy-vnet.outputs.backendSubnet }}
        vnetId: ${{ steps.deploy-vnet.outputs.vnetId }}
      steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        # id: deploy-vnet
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        name: Run preflight validation
        id: deploy-vnet
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          template: ./deploy/modules/create_vnet_and_vpn.bicep
          parameters: >           
            appName=${{ inputs.appName }}
            createGateway=${{ inputs.createGateway }}

      - name: Echo frontendSubnet
        run: echo "::set-output name=frontendAddressPrefix::${{ fromJson(steps.deploy-vnet.outputs.frontendSubnet).properties.addressPrefix }}"  #"::set-output name=frontendSubnet::${{ steps.deploy-vnet.outputs.frontendSubnet }}"       
      - name: Echo vnetID  
        run: echo "::set-output name=frontendSubnet::${{ steps.deploy-vnet.outputs.vnetId }}"
        
  deploy-infra:    
    runs-on: ubuntu-latest
    needs: deploy-vnet    
    steps:               
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - if: inputs.environmentType != 'Production'
      uses: azure/arm-deploy@v1
      name: Run preflight validation
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ inputs.resourceGroupName }}       
        template: ./deploy/azure_sql_private_endpoint.bicep
        parameters: >
          environmentType=${{ inputs.environmentType }}
          appName=${{ inputs.appName }}
          vnetId="/subscriptions/e6566f19-3eb5-436b-904f-fdd540b4fd58/resourceGroups/AzureSQLPrivateVNTest/providers/Microsoft.Network/virtualNetworks/vnet-cosmo-qxb7mehrcb4hk"  
          frontendSubnet='{"name":"frontendSubnet","id":"/subscriptions/e6566f19-3eb5-436b-904f-fdd540b4fd58/resourceGroups/AzureSQLPrivateVNTest/providers/Microsoft.Network/virtualNetworks/vnet-cosmo-qxb7mehrcb4hk/subnets/frontendSubnet","etag":"W/\"86e55076-3bea-4c77-afd4-79a310eb972b\"","properties":{"provisioningState":"Succeeded","addressPrefix":"10.0.0.0/24","delegations":[],"privateEndpointNetworkPolicies":"Disabled","privateLinkServiceNetworkPolicies":"Enabled"},"type":"Microsoft.Network/virtualNetworks/subnets"}'
          backendSubnet='{"name":"backendSubnet","id":"/subscriptions/e6566f19-3eb5-436b-904f-fdd540b4fd58/resourceGroups/AzureSQLPrivateVNTest/providers/Microsoft.Network/virtualNetworks/vnet-cosmo-qxb7mehrcb4hk/subnets/backendSubnet","etag":"W/\"86e55076-3bea-4c77-afd4-79a310eb972b\"","properties":{"provisioningState":"Succeeded","addressPrefix":"10.0.1.0/24","delegations":[],"privateEndpointNetworkPolicies":"Disabled","privateLinkServiceNetworkPolicies":"Enabled"},"type":"Microsoft.Network/virtualNetworks/subnets"}'          
          createWindowsServer1=${{ inputs.createWindowsServer1 }}
          createLinuxServer1=${{ inputs.createLinuxServer1 }}
          createWindowsDesktop1=${{ inputs.createWindowsDesktop }}
          adminDBLoginName=${{ inputs.adminDBLoginName }}
          adminDBPassword=${{ secrets.adminDBPassword }}
          databaseName=${{ inputs.databaseName }}
          vmSize=${{ inputs.vmSize }}
          vmWindowsLoginUser=${{ inputs.vmWindowsLoginUser }}
          vmWindowsLoginPassword=${{ secrets.vmWindowsLoginPassword }}
          vmLinuxLoginUser=${{ inputs.vmLinuxLoginUser }}
          vmLinuxLoginPassword=${{ secrets.vmLinuxLoginPassword }}
         

              
       
