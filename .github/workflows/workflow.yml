name: deploy-toy-website-end-to-end
concurrency: toy-company

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:

  # Build the application and database.
#   build:
#     uses: ./.github/workflows/build.yml

#   # Lint the Bicep file.
#   lint:
#     uses: ./.github/workflows/lint.yml

  deploy-vnet:            
      uses: ./.github/workflows/deploy-vnet.yml
    #   needs: [build, lint]
      with:
        environmentType: Test
        resourceGroupName: AzureSQLPrivateVNTest
        appName: cosmo
        createGateway: no 
        createWindowsServer1: false
        createLinuxServer1: false
        createWindowsDesktop: false
        adminDBLoginName: gary
        databaseName: slaesfloor
        vmSize: 'Standard_A0'  
        vmWindowsLoginUser: gary
        vmLinuxLoginUser: gary         
      secrets:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_TEST }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          adminDBPassword: ${{ secrets.ADMINDBPASSWORD }}
          vmWindowsLoginPassword: ${{ secrets.VMWINDOWSLOGINPASSWORD }}
          vmLinuxLoginPassword: ${{ secrets.VMLINUXLOGINPASSWORD }}

  job2:
     runs-on: ubuntu-latest
     needs: deploy-vnet
     steps:
       - run: echo ${{ needs.deploy-vnet.outputs.frontendSubnetEndIp }} 
       - run: echo ${{ needs.deploy-vnet.outputs.frontendSubnetStartIp }}


  # deploy-infra:    
  #     runs-on: ubuntu-latest
  #     needs: deploy-vnet       
  #     steps:               
  #     - uses: actions/checkout@v3
  #     - uses: azure/login@v1
  #      name: Sign in to Azure
  #      with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #      #- if: inputs.environmentType != 'Production'
  #      uses: azure/arm-deploy@v1
  #      name: Run preflight validation
  #      with:
  #        failOnStdErr: false
  #        deploymentName: ${{ github.run_number }}
  #        resourceGroupName: ${{ inputs.resourceGroupName }}       
  #        template: ./deploy/azure_sql_private_endpoint.bicep
  #        # vmLinuxLoginPassword=${{ secrets.vmLinuxLoginPassword }}
  #        # adminDBPassword=${{ secrets.adminDBPassword }}
  #        # vmWindowsLoginPassword=${{ secrets.vmWindowsLoginPassword }}
  #        parameters: >
  #             environmentType=${{ inputs.environmentType }}
  #             appName=${{ inputs.appName }}
  #             vnetId=${{ needs.deploy-vnet.outputs.vnetId }}
  #             frontendSubnetStartIp=${{ needs.deploy-vnet.outputs.frontendSubnetStartIp }}
  #             frontendSubnetEndIp=${{ needs.deploy-vnet.outputs.frontendSubnetEndIp }}
  #             frontendSubnetId=${{ needs.deploy-vnet.outputs.frontendSubnetId }}
  #             backendSubnetId=${{ needs.deploy-vnet.outputs.backendSubnetId }}
  #             createWindowsServer1=${{ inputs.createWindowsServer1 }}
  #             createLinuxServer1=${{ inputs.createLinuxServer1 }}
  #             createWindowsDesktop1=${{ inputs.createWindowsDesktop }}
  #             adminDBLoginName=${{ inputs.adminDBLoginName }}
  #             databaseName=${{ inputs.databaseName }}
  #             vmSize=${{ inputs.vmSize }}
  #             vmWindowsLoginUser=${{ inputs.vmWindowsLoginUser }}          
  #             vmLinuxLoginUser=${{ inputs.vmLinuxLoginUser }}

          
#   validate-infra-test:
#       uses: ./.github/workflows/deploy-infra.yml 
#       needs: [deploy-vnet]
#       with:
#         environmentType: Test
#         resourceGroupName: AzureSQLPrivateVNTest
#         appName: cosmo
#         frontendSubnet: ${{ needs.deploy-vnet.outputs.frontendSubnet }}
#         backendSubnet: ${{ needs.deploy-vnet.outputs.backendSubnet }}
#         vnetId: ${{ needs.deploy-vnet.outputs.vnetId }}
#         createWindowsServer1: true
#         createLinuxServer1: true
#         createWindowsDesktop: true
#         adminDBLoginName: gary
#         databaseName: slaesfloor
#         vmSize: 'Standard_A0'  
#         vmWindowsLoginUser: gary
#         vmLinuxLoginUser: gary                  
#       secrets:
#           AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_TEST }}
#           AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#           AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#           adminDBPassword: ${{ secrets.ADMINDBPASSWORD }}
#           vmWindowsLoginPassword: ${{ secrets.VMWINDOWSLOGINPASSWORD }}
#           vmLinuxLoginPassword: ${{ secrets.VMLINUXLOGINPASSWORD }}