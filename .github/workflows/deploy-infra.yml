name: deploy-infra

on:
  workflow_call:
    outputs:
      frontendSubnetStartIp: 
        value: ${{jobs.deploy-infra.outputs.frontendSubnetStartIp }}
      frontendSubnetEndIp: 
        value: ${{ jobs.deploy-infra.outputs.frontendSubnetEndIp }}
      frontendSubnetId: 
        value: ${{ jobs.deploy-infra.outputs.frontendSubnetId }}
      backendSubnetId: 
        value: ${{ jobs.deploy-infra.outputs.backendSubnetId }}   
      vinetId: 
          value: ${{ jobs.deploy-infra.outputs.vnetId }}  
    inputs:
      resourceGroupName:
        required: true
        type: string
      environmentType:
        required: true
        type: string
      appName:
        required: true
        type: string
      vnetId:
        required: true
        type: string
      frontendSubnetStartIp:
        required: true
        type: string  
      frontendSubnetEndIp:
          required: true
          type: string   
      frontendSubnetId:
          required: true
          type: string    
      backendSubnetId:
          required: true
          type: string      
      createWindowsServer1:
        required: true
        type: boolean
      createLinuxServer1:
        required: true
        type: boolean
      createWindowsDesktop:
        required: true
        type: boolean
      adminDBLoginName:
        required: true
        type: string
      databaseName:
        required: true
        type: string
      vmSize:
        required: true
        type: string
      vmWindowsLoginUser:
        required: true
        type: string
      vmLinuxLoginUser:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true     
      # adminDBPassword:
      #   required: true             
      # vmWindowsLoginPassword:
      #   required: true
      # vmLinuxLoginPassword:
      #   required: true
      
jobs:
  deploy-infra:
     runs-on: ubuntu-latest
     outputs:
        frontendSubnetStartIp: ${{ steps.deploy-infra.outputs.frontendSubnetStartIp }}
        frontendSubnetEndIp: ${{ steps.deploy-infra.outputs.frontendSubnetEndIp }}
        frontendSubnetId: ${{ steps.deploy-infra.outputs.frontendSubnetId }}
        backendSubnetId: ${{ steps.deploy-infra.outputs.backendSubnetId }}
        vnetId: ${{ steps.deploy-infra.outputs.vnetId }}  
      
     steps:     
     - uses: actions/checkout@v3
     - uses: azure/login@v1
       name: Sign in to Azure
       with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
     - if: inputs.environmentType != 'Production'
       uses: azure/arm-deploy@v1
       name: Deploy Infra
       id: deploy-infra
       with:
         deploymentName: ${{ github.run_number }}
         resourceGroupName: ${{ inputs.resourceGroupName }}
        #  adminDBPassword=${{ secrets.adminDBPassword }}
        #  vmWindowsLoginPassword=${{ secrets.vmWindowsLoginPassword }}
        #  vmLinuxLoginPassword=${{ secrets.vmLinuxLoginPassword }}
         template: ./deploy/azure_sql_private_endpoint.bicep
         parameters: >
           environmentType=${{ inputs.environmentType }}
           appName=${{ inputs.appName }}
           frontendSubnetStartIp=${{ inputs.frontendSubnetStartIp}}
           frontendSubnetEndIp=${{ inputs.frontendSubnetEndIp }}
           frontendSubnetId=${{ inputs.frontendSubnetId }}
           backendSubnetId=${{ inputs.backendSubnetId }}
           vnetId=${{ inputs.vnetId }}
           createWindowsServer1=${{ inputs.createWindowsServer1 }}
           createLinuxServer1=${{ inputs.createLinuxServer1 }}
           createWindowsDesktop=${{ inputs.createWindowsDesktop }}
           adminDBLoginName=${{ inputs.adminDBLoginName }}          
           databaseName=${{ inputs.databaseName }}
           vmSize=${{ inputs.vmSize }}
           vmWindowsLoginUser=${{ inputs.vmWindowsLoginUser }}          
           vmLinuxLoginUser=${{ inputs.vmLinuxLoginUser }}           
           environmentType=${{ inputs.environmentType }}
        #  deploymentMode: Validate



